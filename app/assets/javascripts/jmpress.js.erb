// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// the compiled file.
//
// WARNING: THE FIRST BLANK LINE MARKS THE END OF WHAT'S TO BE PROCESSED, ANY BLANK LINE SHOULD
// GO AFTER THE REQUIRES BELOW.
//
//= require jquery
//= require jquery_ujs
//= require jmpress.custom

hoverElem = null;
current_uchronia = null;
youtube_iframes = new Array();
youtube_images = new Array();
currentSlide = null;
not_supported = false;
urlSlash = "/";

$(window).load( function() {
	});

$(document).ready(function() {


	$("body").show();
	
	// init youtube
	/*
	$(".step iframe[src*=youtube]").each(function () {
		var index = youtube_iframes.length;
		$(this).attr("data-index",index);
		$(this).addClass("youtube");
		vid = $(this).attr("src").match(/\/([^\/]*)[$\?]/);
		vid = vid[1];
		imgUrl = "http://img.youtube.com/vi/" + vid + "/0.jpg";

		$(this).closest(".step").on("enterStep leaveStep", function (event) {
			
			targetElem = $(this).children(".youtube");
			index = parseInt(targetElem.attr("data-index"));
			console.log(targetElem.length);
			if (event.type == "enterStep") {
				targetElem.replaceWith(youtube_iframes[index]);
			}
			if (event.type == "leaveStep") targetElem.replaceWith(youtube_images[index]);
		});

		youtube_images[index] = "<img class=\"youtube\" data-index=\"" + index + "\" src=\""+  imgUrl +"\">";
		youtube_iframes[index] = $(this).replaceWith(youtube_images[index]);
		
		
	});
	*/
	
	$(".step").on("enterStep", function (event) {
		currentSlide = $(this);
		setTimeout(function () {
			iframeElem = currentSlide.find("iframe[src*=youtube]:not([src*=html5])");
			x = iframeElem.attr("src");
			iframeElem.attr("src", "");
			iframeElem.attr("src", x);		
		}, 1500);
	});
	
	
	function swap_start_images() {
		img1 = Math.floor(Math.random() * $('.start_image').length);
		img2 = Math.floor(Math.random() * $('.start_image').length);	
		
		console.log(img1 + ' ' + img2);
		
		left_value1 = $($('.start_image').get(img1)).css('left');
		top_value1 = $($('.start_image').get(img1)).css('top');
		left_value2 = $($('.start_image').get(img2)).css('left');
		top_value2 = $($('.start_image').get(img2)).css('top');

		$($('.start_image').get(img2)).css('left', left_value1);
		$($('.start_image').get(img2)).css('top', top_value1);
		$($('.start_image').get(img1)).css('left', left_value2);
		$($('.start_image').get(img1)).css('top', top_value2);
	}
	
	for(i = 0; i < 4; i++) {
		swap_start_images();
	}
		
	//$(".step").fitVids();
	//var is_safari = navigator.userAgent.indexOf("Safari") > -1 && navigator.userAgent.indexOf("Chrome") < 0;
	var is_safari = false;
	
	// init jmpress
	if (is_safari) {
		$(window).load( function() {
			$('#canvas').jmpress();
			});
		}
	else $('#canvas').jmpress();
	
	// init links for non-supported browsers
	setTimeout(function(){
	if ($('#canvas').hasClass("not-supported"))
		$('a[href^="#/"]').each(function (i,elem) {
			href = $(elem).attr("href");
			$(elem).attr("href", "#" + href.substr(2));
		});
		not_supported = true;
		urlSlash = "";
	},500);

	/*
  var zoomlevel=1;

    $("body").dblclick(function(ev) {
        zoomlevel = zoomlevel == 1 ? 2 : 1;



        $(this).css({
            "-moz-transform":"scale("+zoomlevel+")",
            "-webkit-transform":"scale("+zoomlevel+")",
            "-o-transform":"scale("+zoomlevel+")",
            "-ms-transform":"scale("+zoomlevel+")"
        });


    });
    */

	/*
	$("#menu li").each(function(index, elem) {
		$(elem).click(function() {
			console.log($(this).attr("data-target"));
			$('#jmpress').jmpress('goTo', $(this).attr("data-target"));
		});
	});
	*/
	
	$("input[name='user_biography[on_tour]']").change(function(e){
    if($(this).val() == 'true') {
			$('#user_biography_name').parent().slideDown();
			$('#user_biography_name').attr('required', 'required');
    } else {
			$('#user_biography_name').parent().slideUp();
			$('#user_biography_name').removeAttr('required');
    }
	});
	
	$('.uchronia_link').click(function() {
		current_uchronia = $(this).attr("rel");
	});
	
	$('.random_uchronia').click(function(event) {
			event.preventDefault();

			slugs = $(".uchronia");	
			r = Math.floor(Math.random()*slugs.length);
			window.location.hash = '/' + $(slugs.get(r)).attr("id");		
	});
	
	$('.random_uchronist').click(function(event) {
			event.preventDefault();

			slugs = $(".uchronist");	
			r = Math.floor(Math.random()*slugs.length);
			window.location.hash = urlSlash + $(slugs.get(r)).attr("id");			
	});
		
	$('#new_user_biography').on('ajax:success', function(event, data, status, xhr) {
		$.each(data.translations, function(key, value) {
			console.log(key + ' ' + value);
  	  $('#' + key + ' aside.bio_translation div.bio_translation_content').html(value).show();
		});
		
		if(!current_uchronia) {
			/*
			keys = Object.keys(data.translations)
			r = Math.floor(Math.random()*keys.length);
			console.log(r);
			current_uchronia = keys[r];
			*/
			slugs = $(".uchronia.has-bio");	
			r = Math.floor(Math.random()*slugs.length);
			window.location.hash = urlSlash + $(slugs.get(r)).attr("id");
		} else {
			window.location.hash = urlSlash + current_uchronia;
		}
	});
	
	<% if Rails.env.development? %>
	
		$('*').on('mouseenter', function() { hoverElem = this; });
		
		$( "body" ).keyup(function(event) {
			console.log(event.which);
			if (event.which == "81") { // q
				window.location.hash="#/overview";
			} 
			if (event.which == "27") { // q
				window.location.hash="#/start";
			}   		
			if (event.which == "79") { // o
				out = "";
				$(".step.editable").each (function (index, elem) {
					//x = modifyTransformStyle(elem,"x");
					//y = modifyTransformStyle(elem,"y");  				
					//if (x != $(elem).attr("data-x") || y != $(elem).attr("data-y")) {
						data_x = $(elem).attr("data-x");
						data_y = $(elem).attr("data-y");
						data_rotate = $(elem).attr("data-rotate");
						if (typeof $(elem).attr("data-scale-x") != "undefined") $(elem).attr("data-scale", $(elem).attr("data-scale-x"));
						data_scale = $(elem).attr("data-scale");  					
						data_type = $(elem).attr("data-type");
						data_slug = $(elem).attr("data-slug");
						out += "{:type => \""+data_type+"\", :slug => \""+data_slug+"\", :x => "+data_x+", :y => "+data_y+", :rotate => "+data_rotate+", :scale => "+data_scale+"},\n";
						//console.log( "" + $(elem).attr("id") + ": " + "data-x=\""+modifyTransformStyle(elem,"x")+"\" " + "data-y=\""+modifyTransformStyle(elem,"y")+"\"");
					//}
				});
				console.log(out);
				$('#canvas').jmpress("deinit");
				$('#canvas').jmpress();
				//window.prompt("copy",out);
			}
			
			if (typeof (hoverElem) != "undefined") {
				if ($(hoverElem).hasClass("step")) elem = hoverElem;
				else elem = $(hoverElem).parents(".step").get(0);
			}
			else { console.log("no hover elem");return;}
	
			if (event.which == "73") { // i
				console.log("data-x=\""+modifyTransformStyle(elem,"x")+"\" " + "data-y=\""+modifyTransformStyle(elem,"y")+"\"");
			}
			//elem = $(".step.active").get(0); 		
			if (event.which == "83") { // s
				modifyTransformStyle(elem,"x",50);
			}  	
			if (event.which == "65") { // a
				modifyTransformStyle(elem,"x",-50);
			} 
			if (event.which == "87") { // w
				modifyTransformStyle(elem,"y",-50);
			}
			if (event.which == "89") { // y
				modifyTransformStyle(elem,"y",50);
			}
			if (event.which == "68") { // d
				modifyTransformStyle(elem,"rotate",-6);
			}
			if (event.which == "70") { // f
				modifyTransformStyle(elem,"rotate",6);
			}
			if (event.which == "69") { // e
				modifyTransformStyle(elem,"scale-x",-0.1);
				modifyTransformStyle(elem,"scale-y",-0.1);
			}
			if (event.which == "82") { // r
				modifyTransformStyle(elem,"scale-x",0.1);
				modifyTransformStyle(elem,"scale-y",0.1);
			}    		
		});
	
	<% end %>
	
	
	if ($("#canvas").hasClass("kiosk")) {
		$("#canvas a").addClass("visited-timeout");
		$("#canvas a").click( function () {
			$(this).addClass("visited").removeClass("visited-timeout");
			var link = this;
			setTimeout( function() { $(link).removeClass("visited").addClass("visited-timeout"); console.log("timeout") }, 300000);
			});
		}

});

function modifyTransformStyle(elem, param, increment)
{
	transformStyle = elem.style.webkitTransform;
	if (param == "x")       regexp = /translate3d\(([\d-]+)/;           
	if (param == "y")       regexp = /translate3d\([\d-]+px, ([\d-]+)/; 
	if (param == "rotate")  regexp = /rotateZ\(([\d-]+)/;               
	if (param == "scale-x") regexp = /scaleX\(([\d\.-]+)/;              
	if (param == "scale-y") regexp = /scaleY\(([\d\.-]+)/;              
	currentValueResult = transformStyle.match(regexp);
	if (currentValueResult == null) return false;
	currentValue = currentValueResult[1];
	if (typeof (increment) == "undefined") {
		return currentValue;
	}
	else {
		newValue = parseFloat(currentValue) + increment;
		newTransformStyle = transformStyle.replace(regexp,currentValueResult[0].substr(0, currentValueResult[0].length - currentValue.length)+newValue);
		elem.style.webkitTransform = newTransformStyle;
		$(elem).attr("data-" + param, newValue);
	}
}
